(check
 ;; Declarations
(% Element sort
(% Index sort
(% a2 (term (Array Index Element))
(% i1 (term Index)
(% a1 (term (Array Index Element))
(% A2 (th_holds true)
(% A1 (th_holds (not (= (Array Index Element) a1 a2)))
(% A0 (th_holds (= (Array Index Element) (apply _ _ (apply _ _ (apply _ _ (write Index Element) a1) i1) (apply _ _ (apply _ _ (read Index Element) a2) i1) )  (apply _ _ (apply _ _ (apply _ _ (write Index Element) a2) i1) (apply _ _ (apply _ _ (read Index Element) a1) i1) ) ))
(: (holds cln)

 ;; Printing deferred declarations 

(ext _ _ a1 a2 (\ array_ext_index_1 (\ .sl1

 ;; Printing the global let map ;; Printing aliasing declarations 


 ;; Rewrites for Lemmas 

 ;; In the preprocessor we trust 
(th_let_pf _ (trust_f (not (= (Array Index Element) a1 a2))) (\ .PA270
(th_let_pf _ (trust_f (= (Array Index Element) (apply _ _ (apply _ _ (apply _ _ (write Index Element) a1) i1) (apply _ _ (apply _ _ (read Index Element) a2) i1) )  (apply _ _ (apply _ _ (apply _ _ (write Index Element) a2) i1) (apply _ _ (apply _ _ (read Index Element) a1) i1) ) )) (\ .PA250

;; Printing mapping from preprocessed assertions into atoms 
(decl_atom (= (Array Index Element) (apply _ _ (apply _ _ (apply _ _ (write Index Element) a1) i1) (apply _ _ (apply _ _ (read Index Element) a2) i1) )  (apply _ _ (apply _ _ (apply _ _ (write Index Element) a2) i1) (apply _ _ (apply _ _ (read Index Element) a1) i1) ) ) (\ .v2 (\ .a2
(decl_atom (= (Array Index Element) a1 a2) (\ .v3 (\ .a3
(decl_atom (= Element (apply _ _ (apply _ _ (read Index Element) a1) array_ext_index_1)  (apply _ _ (apply _ _ (read Index Element) a2) array_ext_index_1) ) (\ .v4 (\ .a4
(decl_atom (= Index i1 array_ext_index_1) (\ .v5 (\ .a5
(satlem _ _ (asf _ _ _ .a2 (\ .l4 (clausify_false (contra _ .PA250 .l4)))) (\ .pb4
(satlem _ _ (ast _ _ _ .a3 (\ .l7 (clausify_false (contra _ .l7 .PA270)))) (\ .pb5
 ;; Theory Lemmas 

;; BB atom mapping


;; Bit-blasting definitional clauses 


 ;; Bit-blasting learned clauses 

(satlem _ _ (ast _ _ _ .a4 (\ .l9 (asf _ _ _ .a3 (\ .l6  ;; Array Theory Lemma 
;;(not (= (select a1 array_ext_index_1) (select a2 array_ext_index_1))) (= a1 a2) 
(clausify_false (contra _ .l9 (or_elim_1 _ _ .l6 .sl1)))
))))( \ .lemc6
(satlem _ _ (ast _ _ _ .a5 (\ .l11 (asf _ _ _ .a4 (\ .l8 (ast _ _ _ .a2 (\ .l5  ;; Array Theory Lemma 
;;(not (= i1 array_ext_index_1)) (= (select a1 array_ext_index_1) (select a2 array_ext_index_1)) (not (= (store a1 i1 (select a2 i1)) (store a2 i1 (select a1 i1)))) 
(clausify_false (contra _ (symm _ _ _ (trans _ _ _ _ (trans _ _ _ _ (symm _ _ _ (trans _ _ _ _ (cong _ _ _ _ _ _ (cong _ _ _ _ _ _ (refl _ (read Index Element) ) (symm _ _ _ .l5)) (refl _ i1)) (trans _ _ _ _ (row1 _ _ a1 i1 (apply _ _ (apply _ _ (read Index Element) a2) i1) ) (cong _ _ _ _ _ _ (cong _ _ _ _ _ _ (refl _ (read Index Element) ) (refl _ a2)) .l11)))) (row1 _ _ a2 i1 (apply _ _ (apply _ _ (read Index Element) a1) i1) )) (symm _ _ _ (cong _ _ _ _ _ _ (cong _ _ _ _ _ _ (refl _ (read Index Element) ) (refl _ a1)) (symm _ _ _ .l11))))) .l8))
))))))( \ .lemc7
(satlem _ _ (asf _ _ _ .a5 (\ .l10 (asf _ _ _ .a4 (\ .l8 (ast _ _ _ .a2 (\ .l5  ;; Array Theory Lemma 
;;(= i1 array_ext_index_1) (= (select a1 array_ext_index_1) (select a2 array_ext_index_1)) (not (= (store a1 i1 (select a2 i1)) (store a2 i1 (select a1 i1)))) 
(clausify_false (contra _ (symm _ _ _ (trans _ _ _ _ (trans _ _ _ _ (symm _ _ _ (row _ _ i1 array_ext_index_1 a2 (apply _ _ (apply _ _ (read Index Element) a1) i1)  .l10)) (cong _ _ _ _ _ _ (trans _ _ _ _ (symm _ _ _ (cong _ _ _ _ _ _ (refl _ (read Index Element) ) .l5)) (cong _ _ _ _ _ _ (refl _ (read Index Element) ) (refl _ (apply _ _ (apply _ _ (apply _ _ (write Index Element) a1) i1) (apply _ _ (apply _ _ (read Index Element) a2) i1) ) ))) (refl _ array_ext_index_1))) (row _ _ i1 array_ext_index_1 a1 (apply _ _ (apply _ _ (read Index Element) a2) i1)  .l10))) .l8))
))))))( \ .lemc12
;; Printing final unsat proof 
(satlem_simplify _ _ _ (R _ _ .lemc6 .pb5 .v3) (\ .cl8
(satlem_simplify _ _ _ (Q _ _ (R _ _ .lemc7 .cl8 .v4) .pb4 .v2) (\ .cl9
(satlem_simplify _ _ _ (Q _ _ (R _ _ (R _ _ .lemc12 .cl9 .v5) .cl8 .v4) .pb4 .v2) (\ empty empty)))))))))))))))))))))))))))))))))))))))))))))
;;
