(check
 ;; Declarations
(% fbv0 var_bv
(% fbv1 var_bv
(% v0 var_bv
(% v1 var_bv
(% c (term (Array (BitVec 4) (BitVec 4)))
(% b (term (Array (BitVec 4) (BitVec 4)))
(% a (term (Array (BitVec 4) (BitVec 4)))
(% A2 (th_holds true)
(% A1 (th_holds (= (BitVec 4) (a_var_bv 4 v0) (a_var_bv 4 v1)))
(% A0 (th_holds (not (= (BitVec 4) (apply _ _ (apply _ _ (read (BitVec 4) (BitVec 4)) a) (apply _ _ (apply _ _ (read (BitVec 4) (BitVec 4)) b) (apply _ _ (apply _ _ (read (BitVec 4) (BitVec 4)) c) (a_var_bv 4 v0)) ) )  (apply _ _ (apply _ _ (read (BitVec 4) (BitVec 4)) a) (apply _ _ (apply _ _ (read (BitVec 4) (BitVec 4)) b) (apply _ _ (apply _ _ (read (BitVec 4) (BitVec 4)) c) (a_var_bv 4 v1)) ) ) )))
(: (holds cln)

 ;; Printing deferred declarations 


 ;; Printing the global let map ;; Printing aliasing declarations 

(th_let_pf _ (trust_f (= (BitVec 4) (a_var_bv 4 fbv1) (apply _ _ (apply _ _ (read (BitVec 4) (BitVec 4)) a) (apply _ _ (apply _ _ (read (BitVec 4) (BitVec 4)) b) (apply _ _ (apply _ _ (read (BitVec 4) (BitVec 4)) c) (a_var_bv 4 v1)) ) ) )) (\ .fbvd0
(th_let_pf _ (trust_f (= (BitVec 4) (a_var_bv 4 fbv0) (apply _ _ (apply _ _ (read (BitVec 4) (BitVec 4)) a) (apply _ _ (apply _ _ (read (BitVec 4) (BitVec 4)) b) (apply _ _ (apply _ _ (read (BitVec 4) (BitVec 4)) c) (a_var_bv 4 v0)) ) ) )) (\ .fbvd1

 ;; Rewrites for Lemmas 

 ;; In the preprocessor we trust 
(th_let_pf _ (trust_f (= (BitVec 4) (a_var_bv 4 v1) (a_var_bv 4 v0))) (\ .PA274
(th_let_pf _ (trust_f (not (= (BitVec 4) (apply _ _ (apply _ _ (read (BitVec 4) (BitVec 4)) a) (apply _ _ (apply _ _ (read (BitVec 4) (BitVec 4)) b) (apply _ _ (apply _ _ (read (BitVec 4) (BitVec 4)) c) (a_var_bv 4 v1)) ) )  (apply _ _ (apply _ _ (read (BitVec 4) (BitVec 4)) a) (apply _ _ (apply _ _ (read (BitVec 4) (BitVec 4)) b) (apply _ _ (apply _ _ (read (BitVec 4) (BitVec 4)) c) (a_var_bv 4 v0)) ) ) ))) (\ .PA273

;; Printing mapping from preprocessed assertions into atoms 
(decl_atom (= (BitVec 4) (apply _ _ (apply _ _ (read (BitVec 4) (BitVec 4)) a) (apply _ _ (apply _ _ (read (BitVec 4) (BitVec 4)) b) (apply _ _ (apply _ _ (read (BitVec 4) (BitVec 4)) c) (a_var_bv 4 v0)) ) )  (apply _ _ (apply _ _ (read (BitVec 4) (BitVec 4)) a) (apply _ _ (apply _ _ (read (BitVec 4) (BitVec 4)) b) (apply _ _ (apply _ _ (read (BitVec 4) (BitVec 4)) c) (a_var_bv 4 v1)) ) ) ) (\ .v4 (\ .a4
(decl_atom (= (BitVec 4) (apply _ _ (apply _ _ (read (BitVec 4) (BitVec 4)) a) (apply _ _ (apply _ _ (read (BitVec 4) (BitVec 4)) b) (apply _ _ (apply _ _ (read (BitVec 4) (BitVec 4)) c) (a_var_bv 4 v1)) ) )  (apply _ _ (apply _ _ (read (BitVec 4) (BitVec 4)) a) (apply _ _ (apply _ _ (read (BitVec 4) (BitVec 4)) b) (apply _ _ (apply _ _ (read (BitVec 4) (BitVec 4)) c) (a_var_bv 4 v0)) ) ) ) (\ .v2 (\ .a2
(decl_atom (= (BitVec 4) (a_var_bv 4 v1) (a_var_bv 4 v0)) (\ .v3 (\ .a3
(satlem _ _ (ast _ _ _ .a2 (\ .l5 (clausify_false (contra _ .l5 .PA273)))) (\ .pb4
(satlem _ _ (asf _ _ _ .a3 (\ .l6 (clausify_false (contra _ .PA274 .l6)))) (\ .pb5
 ;; Theory Lemmas 

;; BB atom mapping

(decl_bblast_with_alias _ _ _ _ (bv_bbl_var 4 fbv1 _) .fbvd0 (\ bt250
(decl_bblast_with_alias _ _ _ _ (bv_bbl_var 4 fbv0 _) .fbvd1 (\ bt247
(decl_bblast _ _ _ (bv_bbl_var 4 v1 _)(\ bt241
(decl_bblast _ _ _ (bv_bbl_var 4 v0 _)(\ bt240
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt241 bt240)(\ .PA320
(th_let_pf _ (bv_bbl_= _ _ _ _ _ _ bt250 bt247)(\ .PA293

;; Bit-blasting definitional clauses 


 ;; Bit-blasting learned clauses 

(satlem _ _ (ast _ _ _ .a3 (\ .l7 (asf _ _ _ .a2 (\ .l4 (asf _ _ _ .a4 (\ .l8  ;; Array Theory Lemma 
;;(not (= v1 v0)) (= (select a (select b (select c v1))) (select a (select b (select c v0)))) (= (select a (select b (select c v0))) (select a (select b (select c v1)))) 
(clausify_false (contra _ (symm _ _ _ (cong _ _ _ _ _ _ (cong _ _ _ _ _ _ (refl _ (read (BitVec 4) (BitVec 4)) ) (refl _ a)) (cong _ _ _ _ _ _ (cong _ _ _ _ _ _ (refl _ (read (BitVec 4) (BitVec 4)) ) (refl _ b)) (cong _ _ _ _ _ _ (cong _ _ _ _ _ _ (refl _ (read (BitVec 4) (BitVec 4)) ) (refl _ c)) (symm _ _ _ .l7))))) .l4))
))))))( \ .lemc52s0
(satlem _ _ (ast _ _ _ .a3 (\ .l7 (asf _ _ _ .a2 (\ .l4 (ast _ _ _ .a4 (\ .l9  ;; UF Theory Lemma 
;;(not (= v1 v0)) (= (select a (select b (select c v1))) (select a (select b (select c v0)))) (not (= (select a (select b (select c v0))) (select a (select b (select c v1))))) 
(clausify_false (contra _ (symm _ _ _ .l9) .l4))
))))))( \ .lemc52s1
(satlem_simplify _ _ _ (R _ _ .lemc52s0 .lemc52s1 .v4) ( \ .lemc52
;; Printing final unsat proof 
(satlem_simplify _ _ _ (R _ _ (Q _ _ .lemc52 .pb5 .v3) .pb4 .v2) (\ empty empty)))))))))))))))))))))))))))))))))))))))))))))))))))))
;;
